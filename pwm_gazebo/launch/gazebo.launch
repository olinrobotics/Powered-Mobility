<launch>
	<env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find pwm_description)/models" />

	<!-- these are the arguments you can pass this launch file, for example paused:=true -->
	<arg name="paused" default="false"/>
	<arg name="use_sim_time" default="true"/>
	<arg name="extra_gazebo_args" default="Gazebo args"/>
	<arg name="gui" default="true" />
	<arg name="headless" default="false"/>
	<arg name="debug" default="false"/>
	<arg name="physics" default="ode"/>
	<arg name="verbose" default="false"/>

	<arg name="can" default="false" doc="Launch CAN-based controller"/>
	<arg name="world_name" default="$(find pwm_gazebo)/worlds/olin_2.world" doc="world name for gazebo to run; see pwm_gazebo/worlds for options."/>
    <!--
	<arg name="world_name" default="$(find pwm_gazebo)/worlds/olin.world"/>
	<arg name="world_name" default="$(find pwm_gazebo)/worlds/olin_2.world"/>
	<arg name="world_name" default="$(find pwm_gazebo)/worlds/garage.world"/>
	<arg name="world_name" default="$(find pwm_gazebo)/worlds/simple_2.world"/>
	<arg name="world_name" default="$(find pwm_gazebo)/worlds/elevation.world"/>
    -->

	<!-- set use_sim_time flag -->
	<group if="$(arg use_sim_time)">
		<param name="/use_sim_time" value="true" />
	</group>

	<!-- set command arguments -->
	<arg unless="$(arg paused)" name="command_arg1" value=""/>
	<arg     if="$(arg paused)" name="command_arg1" value="-u"/>
	<arg unless="$(arg headless)" name="command_arg2" value=""/>
	<arg     if="$(arg headless)" name="command_arg2" value="-r"/>
	<arg unless="$(arg verbose)" name="command_arg3" value=""/>
	<arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
	<arg unless="$(arg debug)" name="script_type" value="gzserver"/>
	<arg     if="$(arg debug)" name="script_type" value="debug"/>

	<!-- start gazebo server-->
	<node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="false" output="screen"
		args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)"
		>

		<remap from="wheelchair/cmd_controller/odom" to="sim_odom"/>
		<remap from="wheelchair/cmd_controller/cmd_vel" to="cmd_vel"/>
        <remap from="/scan" to="/scan_raw"/>
	</node>

	<!-- start gazebo client -->
	<group if="$(arg gui)">
		<node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
	</group>

	<include file="$(find pwm_description)/launch/urdf.launch">
        <arg name="sim" value="true"/>
    </include>

	<include file="$(find pwm_control)/launch/pwm_control.launch">
		<arg name="can" value="$(arg can)"/>
	</include>

    <!--
	<param name="robot_description"
		command="$(find xacro)/xacro.py '$(find pwm_description)/urdf/simple.urdf.xacro'" />
    -->

	<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model wheelchair -param robot_description -z 1.0" >
	</node>

	<!-- For Gazebo? -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
		respawn="false" output="screen">
		<remap from="/joint_states" to="/wheelchair/joint_states" />
	</node>

	<node
		name="fake_joint_calibration"
		pkg="rostopic"
		type="rostopic"
		args="pub /calibrated std_msgs/Bool true" />

</launch>
